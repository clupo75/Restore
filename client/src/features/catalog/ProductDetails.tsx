import { useParams } from "react-router-dom"
import { Button, Divider, Grid2, Table, TableBody, TableCell, TableContainer, TableRow, TextField, Typography } from "@mui/material";
import { useFetchProductsDetailsQuery } from "./catalogApi";
import { useAddBasketItemMutation, useFetchBasketQuery, useRemoveBasketItemMutation } from "../basket/basketApi";
import { useEffect, useState, type ChangeEvent } from "react";

export default function ProductDetails() {
  // Extracting the product ID from the URL parameters
  // This allows us to fetch the specific product details based on the ID
  const { id } = useParams();

  // Hooks to manage getting, adding and removing items from the basket
  // These hooks are generated by RTK Query based on the endpoints defined in basketApi
  // They provide functions to trigger the respective mutations
  const [removeBasketItem] = useRemoveBasketItemMutation();
  const [addBasketItem] = useAddBasketItemMutation();
  const { data: basket } = useFetchBasketQuery();

  // Find if the product is already in the basket
  // The + operator is used to convert the id from string to number
  const item = basket?.items.find(i => i.productId === +id!);

  // use state to manage the quantity of the product in the cart
  const [quantity, setQuantity] = useState(0);

  // When the component loads, set the quantity if the item is already in the basket
  useEffect(() => {
    if (item) setQuantity(item.quantity);
  }, [item])

  // Using the custom hook generated by RTK Query to fetch product details
  // The product ID is converted to a number before passing it to the query => +id
  const { data: product, isLoading } = useFetchProductsDetailsQuery(id ? +id : 0);


  const productDetails = [
    { label: 'Name', value: product?.name },
    { label: 'Description', value: product?.description },
    { label: 'Type', value: product?.type },
    { label: 'Brand', value: product?.brand },
    { label: 'Quantity in Stock', value: product?.quantityInStock },
  ]

  if (!product || isLoading) return <div>Loading...</div>;

  // handler function to manage adding or updating the item in the basket
  const handleUpdateBasket = () => {
    // calculate the updated quantity if the item exists in the basket, otherwise use the current quantity
    const updatedQuantity = item ? Math.abs(quantity - item.quantity) : quantity;
    if (!item || quantity > item.quantity) {
      // if the item is not in the basket or the quantity has increased, add the item to the basket
      addBasketItem({ product, quantity: updatedQuantity });
    } else {
      // if the quantity has decreased, remove the item from the basket
      removeBasketItem({ productId: product.id, quantity: updatedQuantity });
    }
  }

  // handler function to manage changes in the quantity input field
  // use the ChangeEvent type from React to type the event parameter
  // then set the type of the input element to HTMLInputElement based on the event type
  const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {
    const value = +event.currentTarget.value;

    if (value >= 0) setQuantity(value);
  }

  

  return (
    <Grid2 container spacing={6} maxWidth="lg" sx={{ mx: "auto" }}>
      <Grid2 size={6}>
        <img src={product.pictureUrl} alt={product.name} style={{ width: '100%' }} />
      </Grid2>
      <Grid2 size={6}>
        <Typography variant="h3">{product.name}</Typography>
        <Divider sx={{ mb: 2 }} />
        <Typography variant="h4" color="secondary">${(product.price / 100).toFixed(2)}</Typography>
        <TableContainer>
          <Table sx={{ '& td': { fontSize: '1rem' } }}>
            <TableBody>
              {/* loop through the list of produCtDetails objects and put them in a table row
               and their values in the table cells */}
              {productDetails.map((details, index) => (
                <TableRow key={index}>
                  <TableCell sx={{ fontWeight: 'bold' }}>{details.label}</TableCell>
                  <TableCell>{details.value}</TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
        <Grid2 container spacing={2} marginTop={3}>
          <Grid2 size={6}>
            <TextField
              variant="outlined"
              type="number"
              label="Quantity in Cart"
              fullWidth
              value={quantity}
              onChange={handleInputChange}
            />
          </Grid2>
          <Grid2 size={6}>
            <Button
              onClick={handleUpdateBasket}
              disabled={item?.quantity === quantity || !item && quantity === 0}
              sx={{ height: '55px' }}
              color="primary"
              size="large"
              variant="contained"
              fullWidth
            >
              {/* conditional text if an item exists or not */}
              {item ? 'Update Quantity' : 'Add to Cart'}
            </Button>
          </Grid2>
        </Grid2>
      </Grid2>
    </Grid2>
  )
}