import { createSlice } from "@reduxjs/toolkit";

export type CounterState = {
  count: number;
};

const initialState: CounterState = {
  count: 42,
};

// using Redux Toolkit's createSlice
// to create a slice of the Redux store for the counter
export const counterSlice = createSlice({
  name: "counter",
  initialState,
  reducers: {
    increment: (state, action) => {
      state.count += action.payload;
    },
    decrement: (state, action) => {
      state.count -= action.payload;
    },
  },
})

// Export the actions generated by createSlice
// These actions can be dispatched to update the state
export const { increment, decrement } = counterSlice.actions;


// Legacy action creators for compatibility with older code
// These are not used in the current code but can be useful for legacy systems
export function incrementLegacy(amount = 1) {
  return {
    type: "increment",
    payload: amount,
  };
}

export function decrementLegacy(amount = 1) {
  return {
    type: "decrement",
    payload: amount,
  };
}

export default function counterReducer(
  state = initialState,
  action: { type: string; payload: number }
) {
  switch (action.type) {
    case "increment":
      return {
        // copy the existing state, then update the count
        ...state,
        count: state.count + action.payload,
      };
    case "decrement":
      return {
        // copy the existing state, then decrement the count
        ...state,
        count: state.count - action.payload,
      };
    default:
      return state;
  }
}
